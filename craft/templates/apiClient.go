package templates

// APIClient ...
var APIClient = `// Code generated by {{ .Generator }} {{ .Version }} ({{ .Build }}); DO NOT EDIT

const {{ lc .Name }} = {
	{{ range $i, $name := .Services }}
	async {{ lc $name }}(params) {
		let config = {
			method: "POST",
			headers: {
				"accept": "application/json",
				"content-type": "application/json"
			},
			body: JSON.stringify(params)
		};
		let response = await fetch("/{{ lc $name }}", config);
		let data = await response.json();
		return data;
	}
	{{ end }}
};

// Model handles the business logic by using generated functions.
class Model extends FlatElement {
    // constructor ...
    constructor() {
        super();
		// add event listeners
		{{ range $i, $name := .Services }}
        this.on("{{ lc $name }}", async (params) => {
            let result = await {{ lc .Name }}.{{ lc $name }}(params);
            this.emit("{{ lc $name }} done", result);
		});
		{{ end }}
    }
}

// ViewModel handles the state and provides a simple API.
class ViewModel extends FlatElement {
    // constructor ...
    constructor() {
        super();
        // add event listeners
        this.on("{{ lc $name }} done", (data) => {
             this.setState("{{ lc $name }} result", data;
        });
    }
    {{ lc $name }}(data) {
        this.emit("{{ lc $name }}", data);
    }
}

const model = new Model();
const viewModel = new ViewModel();
`
