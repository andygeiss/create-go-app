package templates

// APIClient ...
var APIClient = `// Code generated by {{ .Generator }} {{ .Version }} ({{ .Build }}); DO NOT EDIT
{{ $app := .Name }}
// Events:
// {{ range $i, $name := .Services }} 
// {{ $i }}: "{{ lc $name }}" will be the Event which triggers the Command.
//    "{{ lc $name }} done" will be Event which has the Result.
//    "{{ lc $name }} result" will be Key for accessing the Data.
// {{ end }}

// Model handles the business logic by using generated functions.
class Model extends FlatElement {
    // constructor ...
    constructor() {
        super();
		// add event listeners
		{{ range $i, $name := .Services }}
        this.on("{{ lc $name }}", async (params) => {
			let config = {
				method: "POST",
				headers: {
					"accept": "application/json",
					"content-type": "application/json"
				},
				body: JSON.stringify(params)
			};
			let response = await fetch("/{{ lc $name }}", config);
			let data = await response.json();
            this.emit("{{ lc $name }} done", data);
		});
		{{ end }}
    }
}

// ViewModel handles the state and provides a simple API.
class ViewModel extends FlatElement {
    // constructor ...
    constructor() {
        super();
        // add event listeners
		{{ range $i, $name := .Services }}
        this.on("{{ lc $name }} done", (data) => {
             this.setState("{{ lc $name }} result", data);
		});
		{{ end }}
	}
	{{ range $i, $name := .Services }}
    {{ lc $name }}(data) {
        this.emit("{{ lc $name }}", data);
	}
	{{ end }}
}

const model = new Model();
const viewModel = new ViewModel();
`
