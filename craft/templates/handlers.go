package templates

// HandlersGo ...
var HandlersGo = `// Code generated by {{ .Generator }} {{ .Version }} ({{ .Build }}); DO NOT EDIT

package server

import (
	"context"
	"encoding/json"
	"net/http"

	"{{ .Path }}/pkg/api"
)

func (s *Server) handleStatus() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// Decode the request from the client.
		req := new(api.StatusRequest)
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			s.increaseErrorCount(r)
			s.logger.Printf("%-6s %-20s %-50s %-s", "ERROR", r.RemoteAddr, r.RequestURI, err.Error())
			http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
			return
		}
		// Publish the event.
		s.bus.Publish("status", req)
		// Call the service.
		res, err := s.statusService(context.Background(), req)
		if err != nil {
			s.increaseErrorCount(r)
			s.logger.Printf("%-6s %-20s %-50s %-s", "ERROR", r.RemoteAddr, r.RequestURI, err.Error())
			http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
			return
		}
		// Publish the event.
		s.bus.Publish("status done", req)
		// Encode the response and send it to the client.
		if err := json.NewEncoder(w).Encode(&res); err != nil {
			s.increaseErrorCount(r)
			s.logger.Printf("%-6s %-20s %-50s %-s", "ERROR", r.RemoteAddr, r.RequestURI, err.Error())
			http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
		}
	}
}

func (s *Server) handleMetrics() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// Encode the response and send it to the client.
		if err := json.NewEncoder(w).Encode(s.metrics); err != nil {
			s.logger.Printf("%-6s %-20s %-50s %-s", "ERROR", r.RemoteAddr, r.RequestURI, err.Error())
		}
	}
}`
