package templates

// BundleAppJs ...
var BundleAppJs = `
// View ...
class View extends FlatElement {
    // constructor ...
    constructor(viewModel) {
        super();
        this.viewModel = viewModel;
        // add event listeners
        this.on("service done", (data) => {
            this.render();
        });
        // initial rendering
        this.render();
    }
    // render ...
    render() {
        // read the state
        let value = this.viewModel.getState("service result");
        if (typeof value === "undefined") {
            value = "default here";
        }
        // modify the HTML output
        document.querySelector("selector").value = value;
        // add event listeners
        document.querySelector("#btn_service").addEventListener("click", (evt) => {
            evt.preventDefault();
            // service should be replaced with the corresponding service API function.
            this.viewModel.service({
                key: "value"
            });
        });
    }
}

const view = new View(viewModel);`

// BundleAppScss ...
var BundleAppScss = `
@import "flat-mixins.scss";
@import "flat-reset.scss";`

// BundleFlatElementJs ...
var BundleFlatElementJs = `// Code generated by {{ .Generator }} {{ .Version }} ({{ .Build }}); DO NOT EDIT

// FlatElement introduces a state which can be accessed via a get/set.
// Additionally it provides event handling by receiving events via on and emitting events via emit.
class FlatElement {

    // At first we construct an HTML element and set the state to an empty object.
    constructor() {
        this.state = {};
    }

    // emit dispatches a specific event with corresponding data.
    emit(event, data) {
        // We use window for dispatching events globally.
        // Thus, we don't need "bubbles" to propagate events up through the DOM.
        window.dispatchEvent(new CustomEvent(event, {
            detail: {
                output: data
            }
        }))
    }

    // getState reads a state value by a given key.
    getState(key) {
        return this.state[key];
    }

    // on adds a listener for a specific event.
    on(event, fn) {
        window.addEventListener(event, (e) => {
            // Only the object data (detail) is necessary for this kind of event.
            fn(e.detail.output);
        });
    }

    // setState writes a state key, value pair.
    setState(key, val) {
        this.state[key] = val;
    }
}`

// BundleFlatMixinsScss ...
var BundleFlatMixinsScss = `// Code generated by {{ .Generator }} {{ .Version }} ({{ .Build }}); DO NOT EDIT

/* handle media queries by using the min width */
@mixin flat-media($size) {
    @media only screen and (min-width: $size) {
        @content;
    }
}

/* sets text color based on a given background color */
@function set-text-color($color) {
    @if (lightness($color) > 50) {
        @return #000;
    }

    @else {
        @return #fff;
    }
}

/* sets a good contrast background/foreground combination */
@mixin flat-border($color) {
    border: 1px solid $color !important;
}

/* sets a good contrast background/foreground combination */
@mixin flat-color($color) {
    background-color: $color !important;
    color: set-text-color($color) !important;
}

/* sets a neumorphic background gradient */
@mixin flat-gradient($color) {
    background: linear-gradient(to right, lighten($color, 5%), darken($color, 2.5%)) !important;
}

/* sets a neumorphic shadow */
@mixin flat-shadow($color) {
    border-radius: 16px !important;
    box-shadow: -4px -4px 4px lighten($color, 10%), 4px 4px 4px darken($color, 20%) !important;
}

/* sets a neumorphic inset shadow */
@mixin flat-shadow-inset($color) {
    border-radius: 16px !important;
    box-shadow: inset -4px -4px 4px lighten($color, 10%), inset 4px 4px 4px darken($color, 20%) !important;
}`

// BundleFlatResetScss ...
var BundleFlatResetScss = `// Code generated by {{ .Generator }} {{ .Version }} ({{ .Build }}); DO NOT EDIT

/* reset */
* {
    border: none;
    box-sizing: border-box;
    font: inherit;
    margin: 0;
    outline: none;
    padding: 0;
    text-decoration: none;
    transition: all .35s;
}`

// BundleIndexHTML ...
var BundleIndexHTML = `<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/html">

<head>
  <meta charset="utf-8" />
  <meta content="text/html; charset=utf-8" http-equiv="content-type" />
  <meta content="no-cache, no-store, must-revalidate" http-equiv="Cache-Control" />
  <meta content="no-cache" http-equiv="Pragma" />
  <meta content="0" http-equiv="Expires" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <link rel="stylesheet" href="bundle.min.css" />
  <title> App </title>
</head>

<body>
  <script src="bundle.min.js"></script>
</body>

</html>`
