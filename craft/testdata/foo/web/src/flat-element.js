// Code generated by g v (b); DO NOT EDIT

// FlatElement introduces a state which can be accessed via a get/set.
// Additionally it provides event handling by receiving events via on and emitting events via emit.
class FlatElement {

    // At first we construct an HTML element and set the state to an empty object.
    constructor() {
        this.state = {};
    }

    // emit dispatches a specific event with corresponding data.
    emit(event, data) {
        // We use window for dispatching events globally.
        // Thus, we don't need "bubbles" to propagate events up through the DOM.
        window.dispatchEvent(new CustomEvent(event, {
            detail: {
                output: data
            }
        }))
    }

    // getState reads a state value by a given key.
    getState(key) {
        return this.state[key];
    }

    // on adds a listener for a specific event.
    on(event, fn) {
        window.addEventListener(event, (e) => {
            // Only the object data (detail) is necessary for this kind of event.
            fn(e.detail.output);
        });
    }

    // setState writes a state key, value pair.
    setState(key, val) {
        this.state[key] = val;
    }
}