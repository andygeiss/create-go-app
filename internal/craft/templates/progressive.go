package templates

// ManifestJSON ...
var ManifestJSON = `{
    "background_color": "#ffffff",
    "description": "",
    "display": "standalone",
    "icons": [
        {
            "sizes": "180x180",
            "src": "logo180.png"
        },
        {
            "sizes": "192x192",
            "src": "logo192.png"
        },
        {
            "sizes": "512x512",
            "src": "logo512.png"
        }
    ],
    "name": "{{ .Name }}",
    "short_name": "{{ .Name }}",
    "start_url": "/",
    "theme_color": "#ffffff"
}
`

// ServiceWorkerJs ...
var ServiceWorkerJs = `// Code generated by {{ .Generator }} {{ .Version }} ({{ .Build }}); DO NOT EDIT

var PRE_CACHE = "pre_cache_{{ .Name }}_{{ .Version }}";
var RUNTIME_CACHE = "runtime_cache_{{ .Name }}";

var cachedFiles = [
	"/",
	"/bundle.css",
	"/bundle.js"
];

// install will handle precaching we always need.
self.addEventListener("install", (event) => {
	event.waitUntil(
		caches.open(PRE_CACHE)
			.then((cache) => {
				console.log("ServiceWorker " + PRE_CACHE + " installed.");
				return cache.addAll(cachedFiles);
			})
	);
});

// activate will handle cleaning up old caches.
self.addEventListener("activate", (event) => {
	const currentCaches = [PRE_CACHE];
	event.waitUntil(caches.keys().then((names) => {
		return names.filter((name) => !currentCaches.includes(name));
	}).then((cachesToDelete) => {
		return Promise.all(cachesToDelete.map((name) => {
			return caches.delete(name);
		}));
	}).then(() => self.clients.claim())
	);
});

// fetch will handle offline support.
self.addEventListener("fetch", (event) => {
	event.waitUntil(caches.match(event.request).then((response) => {
		return response || fetch(event.request);
	}));
});

`
