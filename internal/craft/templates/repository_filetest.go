package templates

// RepositoryFileTestGo ...
var RepositoryFileTestGo = `// Code generated by {{ .Generator }} {{ .Version }} ({{ .Build }}); DO NOT EDIT

package repository_test

import (
	"path/filepath"
	"testing"

	"{{ .Path }}//pkg/assert"
	"{{ .Path }}//pkg/repository"
)

type TestItem struct {
	ID   string
	Name string
	Age  int
}

func TestFileRepositoryAdd(t *testing.T) {
	path := filepath.Join("testdata", "repository.json")
	r := repository.NewFileRepository(path)
	r.Add("foo", TestItem{ID: "bar", Name: "hugo", Age: 42})
	assert.That("FileRepository Add should return without an error", t, r.Error(), nil)
	assert.That("FileRepository FindBy should return with an item", t, r.FindByID("foo") != nil, true)
}

func TestFileRepositoryFindByID(t *testing.T) {
	path := filepath.Join("testdata", "repository.json")
	r := repository.NewFileRepository(path)
	r.Add("foo", TestItem{ID: "bar", Name: "hugo", Age: 42})
	item := r.FindByID("foo").(map[string]interface{})
	assert.That("FileRepository FindBy should return without an error", t, r.Error(), nil)
	assert.That("FileRepository FindBy should return item", t, item != nil, true)
	assert.That("FileRepository FindBy item id should be bar", t, item["ID"], "bar")
	assert.That("FileRepository FindBy item name should be hugo", t, item["Name"], "hugo")
	assert.That("FileRepository FindBy item age should be 42", t, item["Age"], 42)
}

func TestFileRepositoryFindByKeyValue(t *testing.T) {
	path := filepath.Join("testdata", "repository.json")
	r := repository.NewFileRepository(path)
	r.Add("foo", TestItem{ID: "bar", Name: "hugo", Age: 42})
	item := r.FindByKeyValue("name", "hugo").(map[string]interface{})
	assert.That("FileRepository FindByKeyValue should return without an error", t, r.Error(), nil)
	assert.That("FileRepository FindByKeyValue should return item", t, item != nil, true)
	assert.That("FileRepository FindByKeyValue item id should be bar", t, item["ID"], "bar")
	assert.That("FileRepository FindByKeyValue item name should be hugo", t, item["Name"], "hugo")
	assert.That("FileRepository FindByKeyValue item age should be 42", t, item["Age"], 42)
}

func TestFileRepositoryRemove(t *testing.T) {
	path := filepath.Join("testdata", "repository.json")
	r := repository.NewFileRepository(path)
	r.Add("foo", TestItem{ID: "bar", Name: "hugo", Age: 42})
	r.Remove("foo")
	removeErr := r.Error()
	item := r.FindByID("foo")
	findByErr := r.Error()
	assert.That("FileRepository Remove should return without an error", t, removeErr, nil)
	assert.That("FileRepository FindBy should return nil", t, item, nil)
	assert.That("FileRepository FindBy should return with 'item does not exist' error", t, findByErr, "item does not exist")
}
`
