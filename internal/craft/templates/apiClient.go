package templates

// APIClient ...
var APIClient = `// Code generated by {{ .Generator }} {{ .Version }} ({{ .Build }}); DO NOT EDIT

// createConfig will handle the low-level communication configuration.
const createConfig = (params) => {
    return {
        method: "POST",
        headers: {
            "accept": "application/json",
            "content-type": "application/json"
        },
        body: JSON.stringify(params)
    };
};

{{ $app := .Name }}
// Events:
// {{ range $i, $name := .Services }} 
// {{ $i }}: "{{ sc $name }}" will be the Event which triggers the Command.
//    "{{ sc $name }} done" will be Event which has the Result.
//    "{{ sc $name }} result" will be Key for accessing the Data.
// {{ end }}

// Model handles the business logic by using generated functions.
class Model extends Component {
    // Constructor ...
    constructor() {
        super();
		// Add event listeners{{ range $i, $name := .Services }}
        this.on("{{ sc $name }}", async (params) => {
            let config = createConfig(params);
            fetch("/{{ sc $name }}", config)
            .then((response) => response.json())
            .then((data) => {
                this.emit("{{ sc $name }} done", data);
            })
            .catch((err) => {
                this.emit("{{ sc $name }} error", err);        
            })
		});{{ end }}
    }
}

// ViewModel handles the state and provides a simple API.
class ViewModel extends Component {
    // Constructor ...
    constructor() {
        super();
        // Add event listeners{{ range $i, $name := .Services }}
        this.on("{{ sc $name }} done", (data) => {
             this.setState("{{ sc $name }} result", data);
		});{{ end }}
	}
	// Create API calls	{{ range $i, $name := .Services }}
    {{ sc $name }}(data) {
        this.emit("{{ sc $name }}", data);
	}{{ end }}
}

const model = new Model();
const viewModel = new ViewModel();

// ServiceWorker ...
if ("serviceWorker" in navigator) {
    window.addEventListener("load", () => {
        navigator.serviceWorker.register("/service_worker.js").then((reg) => {
            console.log('ServiceWorker registration successful with scope: ', reg.scope);
        }, (err) => {
            console.log('ServiceWorker registration failed: ', err);
        })
    });
}
`
